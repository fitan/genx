type httpCrud{{.StructName}} interface {
	// 创建
	// @kit-http / POST
	// @kit-http-request CreateRequest true
	Create(ctx context.Context, req CreateRequest) (res CreateResponse, err error)
	// 批量创建
	// @kit-http /batch POST
	// @kit-http-request CreateListRequest
	CreateList(ctx context.Context, req CreateListRequest) (res CreateResponse, err error)
	// 删除
	// @kit-http /{{"{"}}{{lowerCamel .IdName}}{{"}"}} DELETE
	// @kit-http-request DeleteRequest
	Delete(ctx context.Context, req DeleteRequest) (res DeleteResponse, err error)
	// 批量删除
	// @kit-http /batch DELETE
	// @kit-http-request DeleteListRequest
	DeleteList(ctx context.Context, req DeleteListRequest) (res DeleteListResponse, err error)
	// 获取
	// @kit-http /{{"{"}}{{lowerCamel .IdName}}{{"}"}} GET
	// @kit-http-request GetRequest
	Get(ctx context.Context, req GetRequest) (res GetResponse, err error)
	// 列表
	// @kit-http / GET
	// @kit-http-request ListRequest
	List(ctx context.Context, req ListRequest) (list ListResponse, total int64, err error)
	// 更新
	// @kit-http /{{"{"}}{{lowerCamel .IdName}}{{"}"}} PUT
	// @kit-http-request UpdateRequest
	Update(ctx context.Context, req UpdateRequest) (res UpdateResponse, err error)
}

func (s *{{.StructName}}) Create(ctx context.Context, req CreateRequest) (res CreateResponse, err error) {
	var v {{.ModelName}}
	// @copy
	create2ModelDTO(&v, req)
	err = s.{{.GetModelFnName}}().Create(ctx, &v)
	return
}

func (s *{{.StructName}}) CreateList(ctx context.Context, req CreateListRequest) (res CreateResponse, err error) {

	var vs []*{{.ModelName}}
	lo.ForEach(req.Body, func(item CreateRequest, index int) {
		var v {{.ModelName}}
		// @copy
		create2ModelDTO(&v, item)
		vs = append(vs, &v)
	})

	err = s.{{.GetModelFnName}}().CreateList(ctx, vs)
	return
}

func (s *{{.StructName}}) Delete(ctx context.Context, req DeleteRequest) (res DeleteResponse, err error) {
	err = s.{{.GetModelFnName}}().Delete(ctx, req.{{.IdName}})
	return
}

func (s *{{.StructName}}) DeleteList(ctx context.Context, req DeleteListRequest) (res DeleteListResponse, err error) {
	err = s.{{.GetModelFnName}}().DeleteList(ctx, req.{{plural (camel .IdName)}})
	return
}

func (s *{{.StructName}}) Get(ctx context.Context, req GetRequest) (res GetResponse, err error) {
	v, err := s.{{.GetModelFnName}}().Get(ctx, req.{{.IdName}}, nil)
	if err != nil {
		return
	}

	// @copy
	model2GetDTO(&res, v)

	return
}

func (s *{{.StructName}}) List(ctx context.Context, req ListRequest) (list ListResponse, total int64, err error) {
	vs, total, err := s.{{.GetModelFnName}}().List(ctx, req.Page, req.PageSize, req.Order, req.ListQuery.Scope, nil)

	lo.ForEach(vs, func(item {{.ModelName}}, index int) {
		var v GetResponse
		// @copy
		model2GetDTO(&v, item)
		list = append(list, v)
	})

	return
}

func (s *{{.StructName}}) Update(ctx context.Context, req UpdateRequest) (res UpdateResponse, err error) {
	v, err := s.{{.GetModelFnName}}().Get(ctx, req.{{.IdName}}, nil)
	if err != nil {
		err = errors.Wrap(err, "get failed")
		return
	}

	// @copy
	update2ModelDTO(&v, req.Body)

	err = s.{{.GetModelFnName}}().Save(ctx, req.{{.IdName}}, &v)
	if err != nil {
		err = errors.Wrap(err, "save failed")
		return
	}
	return
}
