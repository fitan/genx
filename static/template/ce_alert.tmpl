{{/* gotype: github.com/fitan/gowrap/generator.TemplateInputs */}}
import (
"github.com/go-kit/kit/log/level"
"github.com/go-kit/kit/log"
"fmt"
"time"
)

type alert struct {
	project       string
	service       string
	level         alarm.LevelInfo
	silencePeriod int
	api           api.Service
	next          Service
	logger        log.Logger
}

{{range $m := $.Methods}}
func (s *logging) {{$m.Declaration}} {
	{{if $m.AcceptsContext}}
	defer func(begin time.Time) {
		if err == nil {
			return
		}
		_ = s.logger.Log(
			s.traceId, ctx.Value(s.traceId),
			"method", "{{$m.Name}}",
			{{range $v := $m.ParamsExcludeCtx}}
			"{{$v.Name}}", {{if not $v.Basic}}{{$v.Name}}Json{{else}}{{$v.Name}}{{end}},
			{{end}}
			"took", time.Since(begin),
			{{if $m.ReturnsError}}
			"err", err,
			{{end}}
		)
	}(time.Now())
	{{end}}
	{{if $m.HasResults}}
	return s.next.{{$m.Call}}
	{{else}}
	s.next.{{$m.Call}}
	{{end}}

}
{{end}}

func NewLogging(logger log.Logger, traceId string) Middleware {
	logger = log.With(logger, "{{$.Instance}}", "logging")
	return func(next Service) Service {
		return &logging{
			logger:  level.Info(logger),
			next:    next,
			traceId: traceId,
		}
	}
}