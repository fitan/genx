type {{.InterfaceName}} interface {
	Create(ctx context.Context, v *{{.ModelName}}) (err error)
	CreateList(ctx context.Context, vs []*{{.ModelName}}) (err error)
	Delete(ctx context.Context, {{.IdName}} {{.IdType}}) (err error)
	DeleteList(ctx context.Context, ids []{{.IdType}}) (err error)
	Get(ctx context.Context, {{.IdName}} {{.IdType}}, preload []string) (res {{.ModelName}}, err error)
	List(ctx context.Context, page int, pageSize int, order string, scope func(db *gorm.DB) *gorm.DB, preload []string) (list []{{.ModelName}}, total int, err error)
	Save(ctx context.Context, {{.IdName}} {{.IdType}}, v *{{.ModelName}}) (err error)
}



func (s *{{.StructName}}) Create(ctx context.Context, v *{{.ModelName}}) (err error) {
	return s.db.WithContext(ctx).Create(v).Error
}

func (s *{{.StructName}}) CreateList(ctx context.Context, vs []*{{.ModelName}}) (err error) {
	return s.db.WithContext(ctx).CreateInBatches(vs, 5000).Error
}

func (s *{{.StructName}}) Delete(ctx context.Context, {{.IdName}} {{.IdType}}) (err error) {
	return s.db.WithContext(ctx).Where("{{.IdName}} = ?", {{.IdName}}).Delete(&{{.ModelName}}{}).Error
}

func (s *{{.StructName}}) DeleteList(ctx context.Context, ids []{{.IdType}}) (err error) {
	return s.db.WithContext(ctx).Where("{{.IdName}} in (?)", ids).Delete(&{{.ModelName}}{}).Error
}

func (s *{{.StructName}}) Get(ctx context.Context, {{.IdName}} {{.IdType}}, preload []string) (res {{.ModelName}}, err error) {
	db := s.db.WithContext(ctx)

	for _, pre := range preload {
		db = db.Preload(pre)
	}

	return res, db.Where("{{.IdName}} = ?", {{.IdName}}).First(&res, {{.IdName}}).Error
}

func (s *{{.StructName}}) List(ctx context.Context, page int, pageSize int, order string, scope func(db *gorm.DB) *gorm.DB, preload []string) (list []{{.ModelName}}, total int, err error) {
	db := s.db.WithContext(ctx)

	for _, pre := range preload {
		db = db.Preload(pre)
	}

	scopeDB := scope(db)
	if scopeDB != nil {
		db = scopeDB
	}

	if order != "" {
		if strings.HasPrefix(order, "-") {
			db = db.Order(strings.TrimPrefix(order, "-") + " desc")
		} else {
			db = db.Order(order)
		}
	}

	err = db.Count(&total).Offset((page - 1) * pageSize).Limit(pageSize).Find(&list).Error
	return
}

func (s *{{.StructName}}) Save(ctx context.Context, {{.IdName}} {{.IdType}}, v *{{.ModelName}}) (err error) {
	return s.db.WithContext(ctx).Where("{{.IdName}} = ?", {{.IdName}}).Save(v).Error
}
